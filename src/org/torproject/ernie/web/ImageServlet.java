package org.torproject.ernie.web;

import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.util.*;
import java.util.Date;
import java.text.*;
import java.sql.*;

import org.rosuda.REngine.Rserve.*;
import org.rosuda.REngine.*;

/**
 * Parameterizable graph, generated by R.
 *
 * TODO
 * All requests come from images/graphs/*
 * Get a list of valid graphs for this request, e.g.
 * networksize, exit-relays, etc. Parse parameters,
 * such as range=30d. If the graph is cached and
 * less than an hour old, serve that copy,
 * else regenerate it. All of this depends on whether
 * or not it is a default graph (which will be updated
 * automatically), or a custom graph (which will have
 * to be regenerated).
 */
public class ImageServlet extends HttpServlet {

  Constants c;
  String basePath;

  public ImageServlet ()  {
    c = new Constants();

    basePath = "/tmp/ernie/graphs/";

    /* Create temp graphs directory if it doesn't exist. */
    File dir = new File(basePath);
    if (!dir.exists())  {
      dir.mkdirs();
    }

    /* Change directory permissions to allow it to be written to
     * by Rserve. */
    try {
      Runtime rt = Runtime.getRuntime();
      rt.exec("chmod 777 " + basePath).waitFor();
    } catch (IOException e) {
      //Handle this?
    } catch (InterruptedException e)  {
      //Handle this?
    }
  }

  public void doGet(HttpServletRequest request,
      HttpServletResponse response) throws IOException,
      ServletException {

    String path = basePath + Long.toString(System.currentTimeMillis()) + ".png";

    /* Generate the graph in the temporary files directory. */
    generateGraph(request, path);

    /* Read file from disk and write it to response. */
    BufferedInputStream input = null;
    BufferedOutputStream output = null;
    try {
      File imageFile = new File(path);
      response.setContentType("image/png");
      response.setHeader("Content-Length", String.valueOf(
          imageFile.length()));
      response.setHeader("Content-Disposition",
          "inline; filename=\"graph.png\"");
      input = new BufferedInputStream(new FileInputStream(imageFile),
          1024);
      output = new BufferedOutputStream(response.getOutputStream(), 1024);
      byte[] buffer = new byte[1024];
      int length;
      while ((length = input.read(buffer)) > 0) {
          output.write(buffer, 0, length);
      }
    } finally {
      if (output != null)
        output.close();
      if (input != null)
        input.close();
    }
  }

/**
 * Communicate with Rserve and generate graph based on the HTTP
 * Get parameters.
 */
  private void generateGraph(HttpServletRequest request, String path)  {

    /* The mandatory start and end parameters passed in the request. */
    String sp = request.getParameter("start");
    String ep = request.getParameter("end");

    /* The mandatory graph parameter. */
    String graph = request.getParameter("graph");;

    /* Torperf specific source and size parameters. */
    String source = request.getParameter("source");
    String size = request.getParameter("size");

    /* GetTor specific bundle parameter. */
    String bundle = request.getParameter("bundle");

    /* Bridge-users specific countries parameter. */
    String country = request.getParameter("country");

    /* The valid graph input ranges that are checked. */
    Set<String> knownGraphs = new HashSet<String>(Arrays.asList(
          "networksize,bandwidth,versions,platforms,gettor" +
          "torperf,bridge_users".split(",")));

    /* This map contains different plots and their parameters which are
     * available in the Rserve instance. Keep in mind that some plots accept
     * different parameters, but all of them accept a start and end time
     * (yyyy-mm-dd) and an output path. All of the necessary parameters must be
     * passed in the request array. * See rserve/rserve-init.R for more information
     * on how to feed parameters to the R plots. */

    Map<String, String> rQueries = new HashMap<String, String>();
    rQueries.put("networksize","plot_networksize('%s', '%s', '%s')");
    rQueries.put("bandwidth","plot_bandwidth('%s', '%s', '%s')");
    rQueries.put("versions","plot_versions('%s', '%s', '%s')");
    rQueries.put("platforms","plot_platforms('%s', '%s', '%s')");
    rQueries.put("gettor","plot_gettor('%s', '%s', '%s', '%s')");
    rQueries.put("torperf","plot_torperf('%s', '%s', '%s', '%s', '%s')");
    rQueries.put("bridge_users","plot_bridge_users('%s', '%s', '%s', '%s')");

    Calendar start = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
    Calendar end   = Calendar.getInstance(TimeZone.getTimeZone("UTC"));

    /* Parse graph parameter, set default if it is non valid. */
    if (graph == null && !knownGraphs.contains(graph.toLowerCase())) {
      graph = "networksize";
    }

    /* Parse start and end time inputs, otherwise set defaults. */
    try {
      start.setTime(c.simpledf.parse((sp != null) ? sp : "1970-01-01"));
      end.setTime(c.simpledf.parse((ep != null) ? ep : c.simpledf.format(
          end.getTime())));
    } catch (ParseException e)  {
    }

    /* Insert generated parameters to R graphs. Torperf, gettor,
     * and bridge-users contain special parameters. */
    String rQuery;
    if (graph.equals("gettor"))  {
      rQuery = String.format(rQueries.get("gettor"),
          c.simpledf.format(start.getTime()),
          c.simpledf.format(end.getTime()), path,
          (bundle != null) ? bundle : "en");
    } else if (graph.equals("torperf")) {
      rQuery = String.format(rQueries.get("torperf"),
          c.simpledf.format(start.getTime()),
          c.simpledf.format(end.getTime()), path,
          (source != null) ? source : "moria",
          (size != null) ? size : "1mb");
    } else if (graph.equals("bridge-users"))  {
      rQuery = String.format(rQueries.get("bridge-users"),
          c.simpledf.format(start.getTime()),
          c.simpledf.format(end.getTime()), path,
          (country != null) ? country : "ch");
    } else { /* Just send start, end, path. */
      rQuery = String.format(rQueries.get(graph),
          c.simpledf.format(start.getTime()),
          c.simpledf.format(end.getTime()), path);
    }

    /* Send request to Rserve. */
    try {
      RConnection rc = new RConnection();
      rc.eval(rQuery);
      rc.close();
    } catch (Exception e) {
      return;
    }
  }
}
